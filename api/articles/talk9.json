{"title":"总结一下各种坑","slug":"talk9","date":"2017-12-27T15:09:44.000Z","updated":"2017-12-27T15:56:29.937Z","comments":true,"excerpt":"","content":"<p>考完了信息安全，感觉还可以，记录一下做<a href=\"https://github.com/Punizione/PixivCrawler\" target=\"_blank\" rel=\"external\">PixivCrawler</a>遇到的各种坑。  </p>\n<h2 id=\"nw-js执行-py或-exe文件\"><a href=\"#nw-js执行-py或-exe文件\" class=\"headerlink\" title=\"nw.js执行.py或.exe文件\"></a>nw.js执行.py或.exe文件</h2><p>一开始我的思路是，以nw.js主程序未程序入口，执行nw.js后运行本地服务器，初步以Python的Tornado为服务器，那么问题来了：怎么在nw.js里执行别的东西？  </p>\n<p>既然nw.js是基于Node.js的，应该会有相应的接口，于是我去StackOverflow上逛了几圈，看到这个<a href=\"https://stackoverflow.com/questions/28964442/run-python-script-on-node-webkit-startup-nw-js\" target=\"_blank\" rel=\"external\">例子</a>。</p>\n<p>提问这位兄弟也与我一样的想法，只不过他用的服务器是Flask，回答里提到了这个<code>require(&#39;child_process&#39;).execFile</code> 方法，乍一看是调用执行的方法，调用方式是<code>execFile(&#39;yourscript.py&#39;, {cwd:&#39;.&#39;}, function (error, stdout, stderr){})</code>，看样子还有回调函数，于是就在自己的dmeo里加入了这段代码。</p>\n<p>然后程序就卡在这段代码动不了了。一时间我搞不明白怎么回事，只能去查nw.js的官方文档，发现execFile是Node.js的<a href=\"http://nodejs.cn/api/child_process.html#child_process_child_process_execfile_file_args_options_callback\" target=\"_blank\" rel=\"external\">东西</a>，接着看到了这句：</p>\n<blockquote>\n<p>child_process.execFile() 函数类似 child_process.exec()，除了不衍生一个 shell。 而是，指定的可执行的 file 被直接衍生为一个新进程，这使得它比 child_process.exec() 更高效</p>\n</blockquote>\n<p>那么问题来了：Node找得到我运行Python的环境吗？答案是不能….如果是默认情况下，我电脑的.py文件是被<code>VS Code</code>占用的，那它会不会直接用<code>VSCode</code>打开？</p>\n<p>所以我需要改用<code>exec</code>方法，传入<code>python yourscript.py</code>作为生成Shell的参数。否则服务器根本运行不起来…</p>\n<h2 id=\"PySocks的Socks协议类型\"><a href=\"#PySocks的Socks协议类型\" class=\"headerlink\" title=\"PySocks的Socks协议类型\"></a>PySocks的Socks协议类型</h2><p>由于Pixiv在国内大部分地区被DNS污染，所以国内用户一般都需要使用酸酸乳等工具连接，那么在这个软件里集成Socks就变得理所当然了。</p>\n<p>于是我用了<a href=\"https://github.com/Anorov/PySocks\" target=\"_blank\" rel=\"external\">PySocks</a>作为后台访问Pixiv服务器的代理协议，接着在尝试访问的时候，出现了<code>OpenSSL.SSL.SysCallError: (-1, &#39;Unexpected EOF&#39;)</code>，这是个什么东西？  </p>\n<p>乍一看似乎是SSL证书的问题？</p>\n<p>于是我去<code>requests</code>项目地址下想发Issue，却搜到了和我一样的情况的<a href=\"https://github.com/requests/requests/issues/4272\" target=\"_blank\" rel=\"external\">Issue</a></p>\n<p>这位仁兄也是在使用requests访问是遇到了这个问题，报错情况与我一模一样。作者在下面的回复他也表示都试过了都不行</p>\n<p>然后我看到了这句：</p>\n<blockquote>\n<p>Hey, Everybody. I modified code as below and it worked! but I dont know why!<br>proxies = {‘https’: “socks5h://127.0.0.1:1080”}</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>Yeah!<br>Thanks to @ArthurRyan<br>proxies = {‘https’: “socks5h://127.0.0.1:1080”} is really worked! and I also dont know why!</p>\n</blockquote>\n<p>emmmmm…这就很邪乎了…更邪乎的是作者也没接着回复了…</p>\n<p>我试着把<code>socks5</code>改成了<code>socks5h</code>，真的能用了。。</p>\n<p><strong>I don’t know why!</strong></p>\n<h2 id=\"Python的单例\"><a href=\"#Python的单例\" class=\"headerlink\" title=\"Python的单例\"></a>Python的单例</h2><p>因为使用本地服务器作为爬虫访问Pixiv，那么用户的每次访问都需要被解析成对应的请求发送到本地服务器，然后本地服务器就需要连接Pixiv爬取相应内容，每次都创建一个Session载入一遍cookie似乎有点蠢。</p>\n<p>于是我想到了使用单例：服务器维护一个单例的账号对象，在服务器进程运行期内都是用这个账号对象来访问Pixiv，这样也不用每次都调用 <code>requests.Session()</code>来生成对象。  </p>\n<p>那么Python怎么实现单例？<br>我想到了最简单的方法：模块引入。<br>也就是<code>import XXX</code>，这个在整个Python程序运行过程中只会运行一次，也就是说只需要在一个Python文件里写好对应的表示账号的类，并在生成一个该类的对象<code>object</code>，然后在别的Python文件里<code>import XXX.object</code>就可以了，实测可以运行没有错误。</p>\n","thumbnail":["http://p0s30qphu.bkt.clouddn.com/17-12-26/67177503.jpg"],"categories":[{"name":"编程","path":"api/categories/编程.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"爬虫","path":"api/tags/爬虫.json"},{"name":"Python","path":"api/tags/Python.json"}]}