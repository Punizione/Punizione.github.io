{"title":"LeetCode 24","slug":"leetcode24","date":"2017-11-28T11:10:51.459Z","updated":"2017-12-11T14:19:25.015Z","comments":true,"excerpt":"","content":"<p>一道链表置换的题</p>\n<p><a href=\"https://leetcode.com/problems/swap-nodes-in-pairs/description/\" target=\"_blank\" rel=\"external\">Swap Nodes in Pairs</a></p>\n<h2 id=\"原题目\"><a href=\"#原题目\" class=\"headerlink\" title=\"原题目\"></a>原题目</h2><p>Given a linked list, swap every two adjacent nodes and return its head.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">Given 1-&gt;2-&gt;3-&gt;4, you should <span class=\"built_in\">return</span> the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>\n<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个链表,返回两两置换后的链表,必须置换节点,不能置换节点的值。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>记得去年上数据结构我们老师就给我们讲过这样的题(´・ω・`)</p>\n<p>首先在链表头增加一个首部 <code>dummy</code>,用来指定链表的第一个节点  </p>\n<p>用一个节点引用 <code>now</code> 表明现在指针在的位置  </p>\n<p>然后一个while循环判断<code>now</code>  </p>\n<p>接下来两个节点是否为空,不为空的话就置换这两个节点,然后 <code>now</code> 指针往后移两个单位<br>否则就退出循环了</p>\n<p>代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    ListNode now = dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (now.next!=<span class=\"keyword\">null</span> &amp;&amp; now.next.next!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ListNode first = now.next;</span><br><span class=\"line\">        ListNode second = now.next.next;</span><br><span class=\"line\">        first.next = second.next;</span><br><span class=\"line\">        now.next = second;</span><br><span class=\"line\">        now.next.next = first;</span><br><span class=\"line\">        now = now.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在翻看他人的答案的时候看到了一种使用递归的解法  </p>\n<p>思路是将<code>swapPairs()</code>方法作为只处理两个节点的置换的方法  </p>\n<p>1-&gt;2-&gt;3</p>\n<p>2-&gt;1-&gt;3<br>这样的话使用该方法置换两个节点后,<code>节点1</code>的<code>next</code>就可以指定为<code>swapPairs(3)</code>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span> || head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode second = head.next;</span><br><span class=\"line\">    ListNode third = second.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    second.next = head;</span><br><span class=\"line\">    head.next = swapPairs(third);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路很巧妙,不失为一种可行的方式,在40多个测试用例中,平均时间和使用循环差不多</p>\n<p>或许在一定场景下能比循环的很快吧(笑</p>\n<p>代码我放在Github上了,需要自取~</p>\n","thumbnail":["http://p0s30qphu.bkt.clouddn.com/17-12-11/30812780.jpg"],"categories":[{"name":"编程","path":"api/categories/编程.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"LeetCode","path":"api/tags/LeetCode.json"}]}