{"title":"LeetCode 617","slug":"leetcode617","date":"2017-11-22T12:33:18.990Z","updated":"2017-12-14T14:17:37.140Z","comments":true,"excerpt":"","content":"<p><a href=\"https://leetcode.com/problems/merge-two-binary-trees/description/\" target=\"_blank\" rel=\"external\">Merge Two Binary Trees</a></p>\n<h2 id=\"原题目\"><a href=\"#原题目\" class=\"headerlink\" title=\"原题目\"></a>原题目</h2><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>\n<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">Input: </span><br><span class=\"line\">    Tree 1                     Tree 2                  </span><br><span class=\"line\">          1                         2                             </span><br><span class=\"line\">         / \\                       / \\                            </span><br><span class=\"line\">        3   2                     1   3                        </span><br><span class=\"line\">       /                           \\   \\                      </span><br><span class=\"line\">      5                             4   7                  </span><br><span class=\"line\">Output: </span><br><span class=\"line\">Merged tree:</span><br><span class=\"line\">         3</span><br><span class=\"line\">        / \\</span><br><span class=\"line\">       4   5</span><br><span class=\"line\">      / \\   \\ </span><br><span class=\"line\">     5   4   7</span><br></pre></td></tr></table></figure></p>\n<p>Note: The merging process must start from the root nodes of both trees.</p>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>合并两个二叉树为一棵新的二叉树,若两树中有共有节点则将节点值相加.</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>二叉树的题我的基本思路都会从递归开始<br>这道题已经给出了树的节点的结构<br>所以看到这道题第一时间我就想到了递归,if判断一下是否为空,不为空就相加<br>代码在<a href=\"https://github.com/Punizione/LeetCode/blob/master/%23617.java\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>运行结果如下<br><img src=\"http://p0s30qphu.bkt.clouddn.com/17-12-11/76585387.jpg\" alt=\"01\"></p>\n<p>感觉比想象中的慢了一点,想再思考别的解决方案,但始终觉得递归已经是最快的了,如果用BFS或DFS会更慢,那到底是什么原因使得这串代码时间这么长呢?<br><img src=\"http://p0s30qphu.bkt.clouddn.com/17-12-11/13658034.jpg\" alt=\"二叉懵逼\"></p>\n<p>再回去看代码,想想可能是if语句的问题?<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>仔细一想的话还是下面这种的速度会比上面快(在递归栈里面)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>&#123; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>&#123; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>&#123; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ;</span><br></pre></td></tr></table></figure>\n<p>实际运行结果如下<br><img src=\"http://p0s30qphu.bkt.clouddn.com/17-12-11/542108.jpg\" alt=\"02\"></p>\n","thumbnail":["http://p0s30qphu.bkt.clouddn.com/17-12-11/30812780.jpg"],"primarycolor":"white","accentcolor":"lightGreen","categories":[{"name":"编程","path":"api/categories/编程.json"}],"tags":[{"name":"算法","path":"api/tags/算法.json"},{"name":"LeetCode","path":"api/tags/LeetCode.json"},{"name":"Java","path":"api/tags/Java.json"}]}