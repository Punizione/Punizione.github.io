{"title":"LeetCode23","slug":"leetcode23","date":"2017-12-26T14:07:46.000Z","updated":"2017-12-26T14:22:43.204Z","comments":true,"excerpt":"","content":"<p>最近忙着复习期末都没什么时间刷LeeoCode。。<br><del>信息安全要挂了</del><br><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/description/\" target=\"_blank\" rel=\"external\">Merge k Sorted Lists</a></p>\n<h2 id=\"原题目\"><a href=\"#原题目\" class=\"headerlink\" title=\"原题目\"></a>原题目</h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>合并k个排好序的链表到一个链表。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这道题让我想到了使用桶排序/基数排序来做外排序的最后一个步骤，感觉思路上和实现上都是一样的。</p>\n<p>既然是k个排好序的链表，每次就只需要判断k个链表的头节点哪个比较小，把它取出来，放到新的链表里，如此反复便可以了。</p>\n<p>但是这道题有点不同，如果用上面那个方式实现的话，需要准备k个节点分别放在k个；链表头，这样未免太过繁琐。考虑用Java的优先队列的API来做会简单得多。</p>\n<p>先把所有链表的第一个节点放入优先队列，每次从优先队列中取出一个节点，如果其有后继节点的话则将后继节点加入优先队列，这样用一个循环就能完成程序逻辑。</p>\n<p>代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lists==<span class=\"keyword\">null</span>||lists.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PriorityQueue&lt;ListNode&gt; queue = <span class=\"keyword\">new</span> PriorityQueue&lt;ListNode&gt;(lists.length, <span class=\"keyword\">new</span> Comparator&lt;ListNode&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(ListNode n1, ListNode n2)</span></span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(n1.val&lt;n2.val)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n1.val == n2.val)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode tail = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ListNode node:lists)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.add(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            tail.next = queue.poll();</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tail.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.add(tail.next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果:<br><img src=\"http://p0s30qphu.bkt.clouddn.com/17-12-26/37841711.jpg\" alt=\"res\"><br>速度还算可以..</p>\n","thumbnail":["http://p0s30qphu.bkt.clouddn.com/17-12-11/30812780.jpg"],"primarycolor":"orange","accentcolor":"lightGreen","categories":[{"name":"编程","path":"api/categories/编程.json"}],"tags":[{"name":"算法","path":"api/tags/算法.json"},{"name":"LeetCode","path":"api/tags/LeetCode.json"},{"name":"Java","path":"api/tags/Java.json"}]}