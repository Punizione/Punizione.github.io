{"title":"编程杂谈(1)---Java序列化之使用Serializable","slug":"talk1","date":"2017-11-25T05:38:57.290Z","updated":"2017-12-14T14:18:16.842Z","comments":true,"excerpt":"","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>起因去年上数据结构的课，老师给了道求图的最短路径的题.  </p>\n<p>可想而知得用了Dijkstra算法 (´･ω･｀)<br>但在路径复制的时候,因为我用<code>ArrayList</code>来存储路径,所以出现了复制之后改其中一个就导致其他复制的对象都改变的情况   </p>\n<p>因为我是通过直接赋值来进行复制的，早就听闻Java中对于对象的赋值是属于浅拷贝<br>如果想要得到两个独立的对象,需要使用深拷贝(Deep Copy)<br>而实现深拷贝的方式有多种,当时找的时候图方便,就用了网上的一个通过序列化-反序列化进行深拷贝的方法  </p>\n<p>代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ArrayList深拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * 采用的是序列化-反序列化的方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeepCopy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">copyBySerialize</span><span class=\"params\">(ArrayList src)</span><span class=\"keyword\">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream byteOut = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">new</span> ObjectOutputStream(byteOut);</span><br><span class=\"line\">        out.writeObject(src);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayInputStream byteIn = <span class=\"keyword\">new</span> ByteArrayInputStream(byteOut.toByteArray());</span><br><span class=\"line\">        ObjectInputStream in = <span class=\"keyword\">new</span> ObjectInputStream(byteIn);</span><br><span class=\"line\">        ArrayList dest = (ArrayList)in.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当时乍一看,觉得好像没什么难点,就是变成数据流再从数据流读取<br>后来在Runoob上看到了<a href=\"http://www.runoob.com/java/java-serialization.html\" target=\"_blank\" rel=\"external\">关于Java序列化的教程</a>,于是便来学习一番</p>\n<h2 id=\"什么是序列化\"><a href=\"#什么是序列化\" class=\"headerlink\" title=\"什么是序列化\"></a>什么是序列化</h2><p>序列化指的是将一个对象表示为一个字节序列,该字节序列包含了该对象的数据,有关对象类型的信息和存储在对象中数据的类型<br>而通过序列化之后的字节序列是由JVM管理的,也就是不同平台上的字节序列不会出现“失真”这种情况  </p>\n<h2 id=\"实现序列化\"><a href=\"#实现序列化\" class=\"headerlink\" title=\"实现序列化\"></a>实现序列化</h2><p>而实现序列化的方法很简单–使用类<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html\" target=\"_blank\" rel=\"external\">ObjectInputStream</a>和<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/ObjectOutputStream.html\" target=\"_blank\" rel=\"external\">ObjectOutputStream</a></p>\n<p>使用<code>ObjectInputStream</code> 的 <code>writeObject()</code>方法将一个对象序列化<br>使用<code>ObjectOutputStream</code> 的 <code>readObject()</code>方法将一个对象反序列化</p>\n<p>对于一个对象,该类必须实现 <code>java.io.Serializable</code> 接口,且该类的所有属性也必须是可序列化的,如果某个属性不可序列化,那么需要使用<code>transient</code> 关键字注明该属性是暂时的</p>\n<h2 id=\"关于transient关键字\"><a href=\"#关于transient关键字\" class=\"headerlink\" title=\"关于transient关键字\"></a>关于transient关键字</h2><p>这个关键字用于标识你不需要序列化的变量,在序列化对象时,被<code>transient</code>关键字标注的变量不会被序列化到指定的目的地中</p>\n<ul>\n<li>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问</li>\n<li>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口</li>\n<li>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化</li>\n</ul>\n<p>关于transient的更详细的说明可以参考<a href=\"http://www.cnblogs.com/lanxuezaipiao/p/3369962.html\" target=\"_blank\" rel=\"external\">这个博文</a></p>\n","thumbnail":["http://p0s30qphu.bkt.clouddn.com/17-12-11/42758196.jpg"],"primarycolor":"cyan","accentcolor":"pink","categories":[{"name":"编程","path":"api/categories/编程.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"学习笔记","path":"api/tags/学习笔记.json"}]}